#!/usr/bin/env perl

use strict;

use Getopt::Long;
use IO::Handle;
use Pod::Usage;

use Class::Load qw/try_load_class/;
use Rent::PIQT::REPL;

# Global options
our $FATPACKED;
my $help = undef;
my $verbose = 0;

# Driver options
my $connect_string  = 'oracle://vqa';
my $format          = undef;
my $output_file     = undef;
my $extended_opts   = [ ];
my $extra_plugins   = [ ];

# Startup options
my $config_driver   = '';
my $startup_file    = '.piqtrc';

# Other options
my $list_drivers    = undef;

# Parse various command-line arguments
Getopt::Long::config('no_ignore_case', 'bundling');
GetOptions(
    'help|h'                    => \$help,
    'v|verbose+'                => \$verbose,

    'c|connect=s'               => \$connect_string,
    'f|format=s'                => \$format,
    'o|output=s'                => \$output_file,
    'p|plugins=s@'              => $extra_plugins,
    'x|extended-options=s@'     => $extended_opts,

    'i|ignore-startup-file!'    => sub { $config_driver = 'ignored' },
    'I'                         => sub { $config_driver = 'file' },
    's|startup-file=s'          => \$startup_file,

    'list-drivers'              => \$list_drivers,
) or pod2usage(-verbose => 2);
pod2usage(-verbose => 2) if $help;

# List all available drivers.
if ($list_drivers) {
    my $basefile = 'Rent/PIQT';
    my $replfile = $basefile . '/REPL.pm';
    my $replloc  = $INC{$replfile} || die "Cannot detect location of Rent::PIQT::REPL";

    my $baseloc  = $replloc;
    $baseloc =~ s#$replfile##x;

    my $display = sub {
        my ($component, $human_name, $set_cmd) = @_;
        my $compfile = "Rent/PIQT/$component";
        my $compdir  = "$baseloc/$compfile";

        print STDERR "Supported $human_name drivers",
                ($set_cmd ? " (can also be set using '$set_cmd')" : ""), ":\n";

        if (defined $FATPACKED) {
            foreach (keys %::fatpacked) {
                next unless s/^$compfile//;

                s#^/##;
                s#/#::#g;
                s#\.pm$##;

                print STDERR "  $_\n";
            }
        } else {
            opendir my $dh, $compdir;
            while (readdir $dh) {
                next if /^\./;
                next unless /\.pm$/;

                s#/#::#g;
                s#\.pm$##;

                print STDERR "  $_\n";
            }
            closedir $dh;
        }

        print STDERR "\n";
    };

    print STDERR "\n";
    $display->('DB', 'database');
    $display->('Output', 'mode', 'SET MODE');
    print STDERR "\n";
    exit;
}

# Open the output file, if specified; defaults to STDOUT and STDERR
my ($output_fh, $error_fh);
do {
    $error_fh = IO::Handle->new();
    $error_fh->fdopen(fileno(STDERR), 'w');
    $error_fh->autoflush(1);

    if ($output_file) {
        $output_fh = IO::File->new($output_file, 'a');
        $output_fh->autoflush(1);
    } else {
        $output_fh = IO::Handle->new();
        $output_fh->fdopen(fileno(STDOUT), 'w');
        $output_fh->autoflush(1);
        binmode $output_fh, ":utf8";
    }
};

if ($connect_string =~ m{^([^/]+)/([^@])@(.+)$}) {
    $connect_string = sprintf(
        'oracle://%s?username=%s&password=%s',
        $3,
        $1,
        $2,
    );
} elsif ($connect_string =~ m{^([^@]+)@(.+)$}) {
    my ($db_user, $db_name) = ($1, $2);
    $connect_string = sprintf(
        'oracle://%s?username=%s',
        $db_name,
        $db_user,
    );

    if (try_load_class('Company::Util')) {
        my $db_pass = Company::Util::get_password(
            resource => sprintf('oracle:%s@%s', lc $db_user, lc $db_name),
            noprompt => 1,
        );
        $connect_string = ['oracle',
            database => $db_name,
            username => $db_user,
            password => $db_pass,
        ];
    } else {
        print STDERR "Could not load Company::Util: no password will be used\n" if $verbose;
    }
} else {
    # Handle auto-connect as a last resort. The first option is to load it from
    # Company::Config, which we then use Company::Util to get the password
    # from the $WEBROOT/passwords directory.
    my ($load_success, $load_errstr) = try_load_class 'Company::Config';
    if ($load_success) {
        my $db_name = Company::Config::parameter('db_instance');
        my $db_user = Company::Config::parameter('db_username');
        my $db_pass = Company::Config::parameter('db_password');

        if (!$db_pass && try_load_class('Company::Util')) {
            $db_pass = Company::Util::get_password(
                resource => sprintf('oracle:%s@%s', lc $db_user, lc $db_name),
                noprompt => 1,
            );
        }

        print STDERR "Auto-connecting to $db_user\@$db_name\n" if $verbose;
        $connect_string = sprintf(
            'oracle://%s?username=%s&password=%s',
            $db_name,
            $db_user,
            $db_pass,
        );
    } elsif (exists $ENV{'ORACLE_SID'}) {
        $connect_string = 'oracle://' . $ENV{'ORACLE_SID'};
    } else {
        print STDERR "$0: Cannot auto-connect without Company::Config or ORACLE_SID\n";
        print STDERR "Loading Company::Config caused error:\n";
        print STDERR "    $load_errstr\n";
        print STDERR "Specify --help for more options\n";
        exit(5);
    }
}

# Get the SQL query from the command line; the @rest might be used for
# interpolated queries in the future
my ($sql, @rest) = @ARGV;

# Dynamically modify the config driver based on if a SQL query was provided or
# not; this still respects command-line options if one was given
$config_driver ||= $sql ? 'ignored' : 'file';

# The default format depends on whether we'll end up in interactive mode
# or not: CSV in non-interactive, and tabular in interactive
$format ||= $sql ? 'csv' : 'tabular';

# Initialize the REPL
my $repl = Rent::PIQT::REPL->new(
    cache   => ["file", ".piqt_cache"],
    config  => [$config_driver, $startup_file],
    db      => $connect_string,
    output  => [$format, {out => $output_fh, err => $error_fh}],
    verbose => ($verbose + 1),
);

# Process extended options after system is ready but before plugins,
# so that they can modify any plugin defauts if necessary
foreach my $extended_opt (@$extended_opts) {
    my ($key, $value) = split /=/, $extended_opt, 2;
    unless ($key) {
        $repl->output->error("Extended option must be in 'key=value' format.");
        next;
    }

    $key =~ s/-/_/g;
    $repl->config->$key($value);
}

# Load the standard set of plugins
$repl->load_plugin('DescribeObject');
$repl->load_plugin('EditQuery');
$repl->load_plugin('Print');
$repl->load_plugin('SqlPlusCompatibility');
$repl->load_plugin('TerseQuery');
$repl->load_plugin('Transactional');

# Load any additional plugins
foreach my $plugin_name (@$extra_plugins) {
    $repl->load_plugin($plugin_name);
}

# A SQL query, if provided, should be the last thing on the arguments list
if (@rest) {
    $repl->output->warnf("Too many command line arguments were given.");
}

# Run the SQL query if one is provided; otherwise, this automatically starts
# up the REPL session
$repl->run($sql);

exit();

__END__
=head1 NAME

piqt - Perl Interactive Query Toolkit

=head1 SYNOPSIS

./piqt [opts] [sql]

=head1 OPTIONS

This script is a Rent.com-specific version of PIQT with Rent.com-specific auto-
connection rules:

  * If Company::Config can be loaded, then it'll connect to the default VIVA
    database.
  * If Company::Config could not be loaded, could not be found, then
    it will look at $ORACLE_SID and attempt to connect to it.
  * In any other case, it will die. This behavior can be overridden by using
    the -c or --connect option (see below).

If a one-off [sql] is given on the command line, the provided SQL will be run.
Otherwise, PIQT enters interactive mode. PIQT will process start-up files by
default in interactive mode, but skip it in one-off mode. See also the section
on start-up files below.

Generic options:

  -v, --verbose Be verbose and print debugging information when running.
                Specify multiple times to print more debugging.
  -h, --help    Print help and exit

Driver options:

  --connect <string>
  -c <string>   Connect to the DSN specified. The <string> may be one of:
                * DRIVER://DBNAME?username=DBUSER&password=DBPASS
                  The DRIVER may be any of the ones listed in --list-drivers.
                  The "password" parameter can be left off to log in without
                  a password, or it can be specified without a DBPASS to log
                  in with an empty password.
                * DBUSER/DBPASS@DBNAME
                  where the driver is assumed to be oracle. If DBPASS isn't
                  provided but $WEBROOT is set, then the password is taken
                  from the a file in $WEBROOT/passwords; if one doesn't exist,
                  then no password is used.

                If no connection string is provided, the default behavior is
                to auto-connect using the rules above.

  --format <driver>
  -f <driver>   Use a different output <driver>. Use --list-drivers to view
                a list of available drivers.

  --output <file>
  -o <file>     Redirect STDOUT to <file>. If it doesn't exist, one will be
                created. Otherwise, it is appended.

Startup options:

  --ignore-startup-file
  -i            Ignore the start-up file ~/.piqtrc, which is useful if your
                start-up file has errors.

  --no-ignore-startup-file
  -I            Do not ignore the start-up file, which is useful to apply
                the start-up file in non-interactive mode.

  --startup-file <file>
  -s <file>     Use <file> as the startup file.

  --extended-options <key>=<value>
  -x <key>=<value>
                Set a specific configuration <key> setting to <value>. This
                option may be specified multiple times to set multiple keys:

                    -x header=0 -x last_row_as_footer=1 -x paging=25

                is the same as appending these lines to your startup file:

                    SET header 0
                    SET last_row_as_footer 1
                    SET paging 25

                Extended options are applied after PIQT is ready and after
                the startup file is run, but before plugins are loaded and
                before any queries are run.

Plugin options:

  --plugins <name>
  -p <name>     Load a specific plugin by name; it attempts to be smart about
                capitalization.

Other options:

  --list-drivers
                Output a list of available drivers.

=head1 AUTHOR

This rewrite brought to you by Ripta Pasay <rpasay@rent.com>.

Based on work by Mark Bracher <from-piqt@brachers.org>, incorporating extensive
modifications by Buddy Burden <bburden@rent.com>, and some changes by Ripta
Pasay <rpasay@rent.com> and Kate Yoak <kyoak@rent.com>.
