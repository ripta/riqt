#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';
use 5.008001;
use Getopt::Long;
use Cwd qw(cwd);
use File::Find qw(find);
use File::Spec::Functions qw(
  catdir splitpath splitdir catpath rel2abs abs2rel
);
use File::Spec::Unix;
use File::Copy qw(copy);
use File::Path qw(mkpath rmtree);
use B qw(perlstring);

my $file = 'extern/piqt/piqt-new-runner';
my $out_file = 'extern/piqt/piqt-new';

unless ( -r $file ) {
    die "$file is not readable";
}

my $cwd = cwd;
my @dirs = grep -d, map rel2abs($_, $cwd), ('lib','fatlib');

my %files;
foreach my $dir (@dirs) {
    find(sub {
        return unless -f $_;
        $File::Find::name =~ /PIQT/ or $dir =~ /fat/ or return;
        !/\.pm$/ and return;
        print STDERR "INCLUDE ${File::Find::name}\n";
        $files{File::Spec::Unix->abs2rel($File::Find::name,$dir)} = do {
          local (@ARGV, $/) = ($File::Find::name); <>
        };
        close ARGV;
    }, $dir);
}

my $start = '# Built-On: ' . `date` . q!
# This chunk of stuff was generated by ! . $0 . q!.
# DO NOT MODIFY THIS FILE DIRECTLY. Rather, modify the files under lib/ and
# extern/, and then re-run the builder script.

# Taken from App::FatPacker.
BEGIN {
my %fatpacked;
!;

my $end = q!
s/^  //mg for values %fatpacked;

unshift @INC, sub {
  if (my $fat = $fatpacked{$_[1]}) {
    if ($] < 5.008) {
      return sub {
        return 0 unless length $fat;
        $fat =~ s/^([^\n]*\n?)//;
        $_ = $1;
        return 1;
      };
    }
    open my $fh, '<', \$fat
      or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
    return $fh;
  }
  return
};

} # END OF FATPACK-ISH CODE
!;

my @segments = map {
    (my $stub = $_) =~ s/\.pm$//;
    my $name = uc join '_', split '/', $stub;
    my $data = $files{$_}; $data =~ s/^/  /mg; $data =~ s/(?<!\n)\z/\n/;
    '$fatpacked{'.perlstring($_).qq!} = <<'${name}';\n!
    .qq!${data}${name}\n!;
} sort keys %files;

my $shebang = "";
my $script = "";

open my $fh, "<", $file or die("Can't read $file: $!");
$shebang = <$fh>;
$script = join "", <$fh>;
close $fh;
print STDERR "INCLUDE $file\n";

unless ( index($shebang, '#!') == 0 ) {
    $script = $shebang . $script;
    $shebang = "";
}

open my $out, '>', $out_file or die("Can't open $out_file for writing: $!");
print { $out } join "\n", $shebang, $start, @segments, $end, $script;
print STDERR "WROTE $out_file\n";
close $out;

print STDERR "SHA1SUM ";
system("sha1sum $out_file");
