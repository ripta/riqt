#!/usr/bin/env perl

use strict;
use Getopt::Long;
use IO::Handle;
use Pod::Usage;

use Rent::PIQT::REPL;

# use Rent::PIQT::Cache;
# use Rent::PIQT::Config;
# use Rent::PIQT::DB;
# use Rent::PIQT::Output;

my $help = undef;
my $verbose = 0;

my $format      = 'csv';
my $output_file = undef;

Getopt::Long::config('no_ignore_case');
GetOptions(
    'help|?'    => \$help,
    'verbose+'  => \$verbose,

    'format'    => \$format,
    'output'    => \$output_file,
) or pod2usage(2);

STDOUT->autoflush(1);
STDERR->autoflush(1);

pod2usage(1) if $help;

my ($conn, $sql) = @ARGV;

my ($output_fh, $error_fh);
do {
    $error_fh = IO::Handle->new();
    $error_fh->fdopen(fileno(STDERR), 'w');
    $error_fh->autoflush(1);

    if ($output_file) {
        $output_fh = IO::File->new($output_file, 'w');
        $output_fh->autoflush(1);
    } else {
        $output_fh = IO::Handle->new();
        $output_fh->fdopen(fileno(STDOUT), 'w');
        $output_fh->autoflush(1);
    }
};

my $repl = Rent::PIQT::REPL->new(
    cache  => ["file", ".piqt_cache"],
    config => ["file", ".piqtrc"],
    db     => $conn || 'oracle://vqa',
    output => ["tabular", out => $output_fh, err => $error_fh],
);

$repl->register('exit', 'quit', '\q',
    sub {
        my ($self) = @_;
        $self->output->info("BYE");
        $self->_done(1);
        return 1;
    }
);
$repl->register('set',
    sub {
        my ($self, $name, $value) = @_;
        if (defined $value) {
            $self->output->info("SET $name $value");
        } else {
            $self->output->info("SET $name " . $self->config->$name);
        }

        return 1;
    }
);

if ($sql) {
    $repl->config->verbose($verbose || 0);
    $repl->output("csv");
    $repl->process($sql);
} else {
    $repl->config->verbose($verbose + 2);
    $repl->run;
}

exit();
